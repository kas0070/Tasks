dir.create("testdir2")
help
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
1:20
pi:10
15:1
':'
help
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect(0.5, 55, -10, 6)
help
Help
num_vect(c(0.5, 55, -10, 6))
Help
num_vectc(0.5, 55, -10, 6)
Help
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
Print(tf)
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Katie Stanley")
c(my_char, "SunshineKatie")
my_name <- c(my_char, "Katie Stanley")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z")
Help
paste(1:3, c(X, Y, Z)
paste(1:3, c(X, Y, Z)
Help
paste(1:3, c(X, Y, Z))
HelpHelp
Help
paste(1:3, c(X, Y, Z))
paste(1:3, c(X, Y, Z))
paste(1:3,sep = c(X, Y, Z)
paste(1:3,sep = c(X, Y, Z)
Help
paste("1:3"","sep="c(X, Y, Z)" )
Help
paste("1:3","sep="c(X, Y, Z)" )
Help
paste("1:3","sep="c(X, Y, Z)" )
Help
paste("1:3","sep="c(X, Y, Z)" )
Help
paste("1:3","sep="c(X, Y, Z)" )
Help
paste("1:3","sep="c(X, Y, Z)" )
paste("1:3","c("X", "Y", "Z"), sep= " ")
paste("1:3","c("X", "Y", "Z")", sep= " ")
paste("1:3","c("X", "Y", "Z")", sep= " ")
help
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
-- my_data <- sample(c(y, z), 100).
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0\0
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
help
help
my_vector <- c([1:20])
my_vector <- c(1:20)
help
my_vector <- c(1:20)
help
help
my_vector <- c(1:20)
help
info()
nxt()
my_vector <- c(1:20)
my_vector<-c(1:20)
my_vector<-c('1:20')
my_vector<- c('1:20')
help
help
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20)
my_matrix2 <- my_matrix(1:20)
help
matrix(my_matrix2 <- my-matrix(1:20))
matrix(my_matrix2 <- my-matrix(1:20))
help
matrix(1:20)
help
matrix(1:20) <- my_matrix2
my_matrix2 <- matrix(1:20)
help
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- 1:20)
matrix(mymatrix2 <- my_matrix,1:20)
matrix(mymatrix2 <- my_matrix,1:20)
matrix(mymatrix2 <- my_matrix(1:20))
matrix(mymatrix2 <- my_matrix(1:20))
matrix(mymatrix2(1:20))
matrix(mymatrix2(1:20)
matrix(mymatrix2(1:20))
help
matrix(mymatrix2(1:20))
help
info()
nxt()
matrix(my-matrix2 <- 1:20, 4, 5)
matrix(my-matrix2 <- c(1:20, 4, 5)
matrix(my-matrix2 <- c(1:20, 4, 5))
help
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix,my_matrix2)
my_char <- Bill,Gina,Kelly,and Sean
patients <- my_char(Bill,Gina,Kelly,and Sean)
patients <- my_char(""Bill,Gina,Kelly,and Sean"")
patients <- ""Bill,Gina,Kelly,and Sean""
patients <- ""Bill,Gina,Kelly,and Sean""
patients <- ""Bill,Gina,Kelly,and Sean""
patients <- ""Bill,Gina,Kelly,and Sean""
help
patients <- my_char""Bill,Gina,Kelly,and Sean""
patients <- my_char""Bill,Gina,Kelly,and Sean""
help
""patients <- Bill,Gina,Kelly,and Sean""
c(my_char,patients <- Bill,Gina,Kelly,and Sean)
c(my_char,patients <- Bill,Gina,Kelly,and Sean)
help
my_char(patients <- Bill,Gina,Kelly,and Sean)
my_char(patients <- Bill, Gina, Kelly, Sean)
paste(my_char,collapse = ""patients <- Bill, Gina, Kelly, Sean"")
help
my_char(patients <- Bill, Gina, Kelly, Sean)
my_char(patients <- "Bill", "Gina", "Kelly", "Sean")
my_char(patients <- c("Bill", "Gina", "Kelly", "Sean"))
my_char(patients <- c("Bill", "Gina", "Kelly", "Sean"))
my_char(patients <- c("Bill", "Gina", "Kelly", "Sean"))
my_char(patients <- c("Bill", "Gina", "Kelly", "Sean"))
my_char <- (patients <- c("Bill", "Gina", "Kelly", "Sean"))
patients <- (my_char <- c("Bill", "Gina", "Kelly", "Sean"))
patients <- (my_char("Bill", "Gina", "Kelly", "Sean"))
patients <- (my_char("Bill", "Gina", "Kelly", "Sean"))
my_char <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", and "Sean")
my_char <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_vector)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frame)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames()
colnames(my_data)
colnames(my_data) <- cnames
my_data
==
'=='
'True==True'
True==True
True==True
help
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 ! 7
5 ! 7
!
!
!
!True
!
!True
!True
!True
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints>0)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5)
mean(c(2, 4, 5)
mean(c(2, 4, 5))
boring_function <- function(x) {
x
}submit()
submit()
boring_function('My first function!')
boring_function to view its source code
boring_function
# my_mean(sum(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
my_mean <- (function(my_vector)/length(my_vector))
help
my_mean <- (function(my_vector)*length(my_vector))
my_mean <- (function(my_vector)/length(my_vector))
my_mean <- (function(my_vector)/length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
my_mean <- (sum(my_vector)/length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
my_mean(sum(my_vector)/length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
help()
my_mean(sum(my_vector)/length(my_vector))
my_mean <- (sum(my_vector)/length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
my_mean <- (sum(my_vector), length(my_vector))
my_mean <- (sum(my_vector)/ length(my_vector))
my_mean <- (sum(my_vector)/ length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
my_mean <- (sum((c(1, 2, 3))/ length(c(1, 2, 3))
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
my_mean <- (sum('my_vector')/ length('my_vector')
# my_mean(sum(my_vector),length(my_vector)
# Remember: the last expression evaluated will be returned!
submit()
# my_mean(sum(my_vector),length(my_vector)
submit()
my_mean <- (sum('my_vector')/ length('my_vector')
# my_mean(sum(my_vector),length(my_vector)
submit()
my_mean <- (sum('my_vector')/ length('my_vector'))
my_mean <- (sum(my_vector)/ length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
submit()
my_mean <- my_mean(sum(my_vector)/ length(my_vector))
my_mean <- function(sum(my_vector)/ length(my_vector))
my_mean <- function(x){sum(my_vector)/ length(my_vector)}
# my_mean(sum(my_vector),length(my_vector)
submit()
my_mean <- function(x)(sum(my_vector)/ length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
submit()
help.search()
help.request()
help(Time to make a more useful function! We're going to replicate the functionality of the mean() function by creating a function called: my_mean(). Remember that
| to calculate the average of all of the numbers in a vector you find the sum of all the numbers in the vector, and then divide that sum by the number of numbers
| in the vector)
my_mean <- function(x)(sum(my_vector)/ length(my_vector))
# my_mean(sum(my_vector),length(my_vector)
submit()
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
lost
help(function)
help(function)
my_mean <- function(my_vector)
my_vector(sum(my_vector)/ length(my_vector))
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
my_mean <- function((sum(my_vector)/ length(my_vector))
my_mean <- function((sum(c(my_vector)/ length(c(my_vector))
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
my_mean <- function((sum(c(my_vector))/ length(c(my_vector))
my_mean <- function(sum(c(my_vector))/ length(c(my_vector)
my_mean <- function(sum(c(my_vector))/ length(c(my_vector)
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
my_mean <- function(sum(c(my_vector)/length(c(my_vector))
my_mean <- function(sum/length(c(my_vector))
my_mean <- function(sum, length(c(my_vector))
my_mean <- function(sum, length(c(1, 2, 3))
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
my_mean <- function(my_vector)
my_mean(sum/length)
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
help(help)
help(pdf)
help("functionWithTrace-class")
my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
submit()
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
# my_mean <- function((sum(my_vector)/ length(my_vector))
submit()
my_mean <- function((sum(my_vector)/ length(my_vector))
# my_mean <- function((sum(my_vector)/ length(my_vector))
submit()
help()
info()
nxt()
my_mean <- functionBody((sum(my_vector)/ length(my_vector))
my_mean <- functionBody(sum(my_vector)/ length(my_vector))
my_mean <- function sum(my_vector)/ length(my_vector)
my_mean <- function(sum(my_vector)/ length(my_vector){}
my_mean <- function(sum(my_vector)/length(my_vector){}
# my_mean <- function((sum(my_vector)/ length(my_vector))
submit()
my_mean <- function(sum("my_vector")/length("my_vector"){}
my_mean <- function(sum("my_vector"), length("my_vector"){}
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_vector(Sum, length)
my_mean <- function(sum, length){}
my_mean
my_vector <- my-mean
my_vector <- my_mean
# my_mean <- function((sum(my_vector)/ length(my_vector))
submit()
my_vector(sum)
my_mean <- function(sum)(length){}
my_mean
# my_mean <- function((sum(my_vector)/ length(my_vector))
submit()
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
my_mean
my_vector <- my_mean
# my_mean <- function(x)(sum(my_vector)/ length(my_vector))
submit()
library(swirl)
swirl()
mean(my_vector)
n = length(my_vector)
total = sum(my_vector)
Mean = total/n
Mean = sum(my_vector)/length(my_vector)
Mean = function(X) {M = sum(X)/length(X); M}
Mean(my_vector)
submit()
mean(my_vector)
n = length(my_vector)
total = sum(my_vector)
Mean = total/n
Mean = sum(my_vector)/length(my_vector)
Mean = function(X) {M = sum(X)/length(X); M}
Mean(my_vector)
submit()
my_mean <- function(my_vector) {}
mean(my_vector)
n = length(my_vector)
total = sum(my_vector)
Mean = total/n
Mean = sum(my_vector)/length(my_vector)
Mean = function(X) {M = sum(X)/length(X); M}
Mean(my_vector)
submit()
install.packages("paleobioDB", dep = T)
setwd("C:\\Users\\kas0070\\Desktop\\evolution\\tasks\\task_03")
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA,MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)),nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age(millions of years ago)", ylab="num. of species", main = Taxon)
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out =nrow(newspeciesOverTime)), newspeciesOverTime[,2], col='red')
#..
legend("topleft", legend=c("first appear", "go extinct"), col=c('black', 'red'), lty=1, bty="n")
OceanCol <- "light Blue"
LandCol <- "black"
Cols <- c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15')
par(las=0)
pbdb_map_richness(fossils, col.ocean =OceanCol, col.int = LandCol, col.rich =Cols)
#geological time scale
#here://www.geosociety.org/documents/gsa/timescale/timescl.pdf
MinMA <- 201
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 66
MaxMA <- 145
cretaceous_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(cretaceous_fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
mtext(side = 3, "Cretaceous (145- 66Ma)", cex=3, line=-2)
Taxon2 <- "Mammalia"
MinMa <- 66
MaxMa <- 252
fossils2 <- pbdb_occurrences(base_name = Taxon2, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime2 <- pbdb_richness(fossils2, rank = "genus", temporal_extent = c(MaxMA,MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
Col_dino <- Cols[length(Cols)]
Col_mammal <- Cols[1]
LineWidth <-2
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
