PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
nrow(PatGrandma)
nrow(MatGrandma)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
#What should the # be?
#
ToMom <- length( grep("mom", Focus))/ length( Focus)
#what should these numbers be? Do they match your expectations?
ToMom
ToMomMom <- length( grep( "grandma_mom", Focus))/ length( Focus)
ToMomDad <- length( grep(" grandpa_mom", Focus))/ length( Focus)
ToMomMom
ToMomDad
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
nrow(PatGrandma)
nrow(MatGrandma)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
#What should the # be?
#
ToMom <- length( grep("mom", Focus))/ length( Focus)
#what should these numbers be? Do they match your expectations?
ToMom
#
ToMomMom <- length( grep( "grandma_mom", Focus))/ length( Focus)
ToMomDad <- length( grep(" grandpa_mom", Focus))/ length( Focus)
ToMomMom
ToMomDad
head(Focus)
tail(focus)
ToMomMom <- length( grep( "grandma_mom", Focus))/ length( Focus)
ToMomDad <- length( grep( "grandpa_mom", Focus))/ length( Focus)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=200, nrep=5, pause=0.001)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=200, nrep=5, pause=0.001)
#Run over again watching lines? Note pattern change Ne
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
Line <- Im(tExt ~ Samples)
Line <- lm(tExt ~ Samples)
HWE<- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from =
lines(p, GenoFreq[,"aa"], lwd=2, col="red") 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
HWE<- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Ne <- 500
Pop <- simPop(Ne)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/Ne, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
nrow(PatGrandma)
nrow(MatGrandma)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
#What should the # be?
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
#Yes they are different, population 1 is larger than population 2.(TrueMeans)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
#Examine objects using head() and nrow() functions.
nrow(PatGrandma)
nrow(MatGrandma)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
#What should the # be?
#
#
ToMom <- length( grep("mom", Focus))/ length( Focus)
ToMom
#
ToMomMom <- length( grep( "grandma_mom", Focus))/ length( Focus)
ToMomDad <- length( grep( "grandpa_mom", Focus))/ length( Focus)
Sibling_01 <- makeBaby(Brenda, Alan)
ManySiblings <- replicate(1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/ length( Focus))
quantile(ManySiblings)
mean(ManySiblings)
plot(density( ManySiblings), main="", xlab="proportion shared genes")
HWE<- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Ne <- 500
Pop <- simPop(Ne)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/Ne, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
install.packages("learnPopGen")
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=5, pause=0.001)
#Run over again watching lines? Note pattern change Ne
install.packages("learnPopGen")
library(learnPopGen)
x <- genetic.drift(Ne=20, nrep=5, pause=0.001)
#Run over again watching lines? Note pattern change Ne
#Two-Allele Drift
install.packages("learnPopGen")
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=5, pause=0.001)
#Run over again watching lines? Note pattern change Ne
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=500, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
albine(Line)
#You may consider running  Line2 <- Im( tExt~Samples + 0) which one makes more sense, what does +0 do?
Line2 <- Im( tExt~Samples + 0)
#You may consider running  Line2 <- Im( tExt~Samples + 0) which one makes more sense, what does +0 do?
Line2 <- Im( tExt~Samples + 0)
#You may consider running  Line2 <- Im( tExt~Samples + 0) which one makes more sense, what does +0 do?
Line2 <- Im( tExt~Samples + 0)
Line2 <- Im( tExt~Samples + 0)
#You may consider running  Line2 <- Im( tExt~Samples + 0) which one makes more sense, what does +0 do?
Line2 <- lm( tExt~Samples + 0)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=500, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
albine(Line)
#You may consider running  Line2 <- Im( tExt~Samples + 0) which one makes more sense, what does +0 do?
Line2 <- lm( tExt~Samples + 0)
#You may consider running  Line2 <- Im( tExt~Samples + 0) which one makes more sense, what does +0 do?
Line2 <- lm( tExt~Samples + 0)
Line2 <- lm( tExt~Samples + 0)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=500, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
albine(Line)
Line2 <- lm( tExt~Samples + 0)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=500, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
albine(Line)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=500, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=500, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
source("http://jonsmitchell.com/code/fxn05.R")
Pop <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "1", xlab="generation", ylab ="allele freq.", lwd=2)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "1", xlab="generation", ylab ="allele freq.", lwd=2)
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "1", xlab="generation", ylab ="allele freq.", lwd=2)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "1", xlab="generation", ylab ="allele freq.", lwd=2)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "l", xlab="generation", ylab ="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c ("a", "b"), col = c("black", "red"), lwd=2, bty="n")
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "l", xlab="generation", ylab ="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c ("a", "b"), col = c("black", "red"), lwd=2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
#Scientistic testing
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum((( Expection - Observed)^ 2)/ Expectation)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 "=" ~.(Chisq)), legend.text=c("expected", "observed"))
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
setwd("C:\\Users\\kas0070\\Desktop\\evolution\\tasks\\task_05")
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
!
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
#This line calculates chi-squared for the first row of counts
calcChi(counts[1,])
#This line calculates chi-squared for all the rows at once.
Chisqs <- apply(counts, 1, calcChi)
#Use the following function multiple times
plotChis(counts)
#How "even" are the bars when the chi squared is high?
#
#How "even" are they when it is low?
#
#What does plotChis() show you about how to interpret the number a Chi-sqaured test spits out?
#
#What's the average chi_sqaured?
#
#How would you interpret thta given (many) plots you should've just looked at?
#
Avg <- mean(Chisqs)
#How does the average chi-squared compare to the critical value in the packet (11.70)?
#
#Does the chi-squared differ by the background?
#
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length( which( Chisqs > 11.70))/ length(Chisqs)
percSig <- round(100 * propSig)
#percSig tells you the percent of trails that had a significant p-value.
percSig
#Does that # suprise you?
#
#Do you think the only thing driving that very high number is natural selection?
#
#Plot Chi-squared results
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")
#Set up empty plot to put data into
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at=1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
#Add Histogram of the data
counter <- 1
for(i in backgrounds) {
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
#Add a line reprsenting the critical value
abline( v= 11.70, lty=2, lwd = 2, col='black')
#The more to the right of that line a distrubution is, the more often trials on that background were"significant"
#Do you see any meaningful differences between backgrounds?
#
#simDraws=blind toothpick experiment random
#Running the experiment without natural selection 10,000 times.
Simulation <- simDraws(10000)
#Add those ten thousand Chi-squared simulations to a plot
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
#What % of the time does the selection-free simulation find a "significant" (greater than 11.70) result?
#
#How can the selction-free simulation produce final counts so different from the intial counts?
#Fit values are 1 for each toothpick colors
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
#1 tooth pick type selected against
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
#3 toothpick types selected against
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
#5 selected against
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
#insane selection
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit) <- 1:6
Simulation6 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation6, Colo=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel.sim.")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
simPop()
simPop(aa)
simPop(freqa)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "l", xlab="generation", ylab ="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c ("a", "b"), col = c("black", "red"), lwd=2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
#Scientific testing
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "l", xlab="generation", ylab ="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c ("a", "b"), col = c("black", "red"), lwd=2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
#Scientific testing
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
#Try setting the observed vector to c(5, 0, 0, 35) and (2,3, 10, 30) and other combinations you can think of.
Observed <- c(5, 0, 0, 35)
Observed <- c(2,3, 10, 30)
Observed <- c(5, 0, 0, 35)
Observed <- c(3, 4, 7, 32)
Observed <- c(10, 10, 10, 10)
Expectation <- c(10, 10, 10, 10)
Observed <- c(10, 10, 10, 10)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1: nrow(Pop1), Pop1[,1], ylim =c(0, 1), type = "l", xlab="generation", ylab ="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c ("a", "b"), col = c("black", "red"), lwd=2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(2,3, 10, 30)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(10, 10, 10, 10)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(40, 40, 40, 40)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(10, 10, 10, 10)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(3, 4, 7, 32)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
calcChi(counts[1,])
#This line calculates chi-squared for all the rows at once.
Chisqs <- apply(counts, 1, calcChi)
#Use the following function multiple times
plotChis(counts)
#Look at plots, look at the chisqaure value for each panel, and the heights of the bars.
#How "even" are the bars when the chi squared is high?
#When compared to the 10 mark the groups are not even at all as one group or color is extremely high and the other are not.
#How "even" are they when it is low?
#exactly even in regards to 10 mark.
#What does plotChis() show you about how to interpret the number a Chi-sqaured test spits out?
#
plotChis()
#Use the following function multiple times
plotChis(counts)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
#This line calculates chi-squared for the first row of counts
calcChi(counts[1,])
#This line calculates chi-squared for all the rows at once.
Chisqs <- apply(counts, 1, calcChi)
#Use the following function multiple times
plotChis(counts)
#Use the following function multiple times
plotChis(counts)
#Use the following function multiple times
plotChis(counts)
#What's the average chi_sqaured?
#
average chi_squared
#What's the average chi_sqaured?
#
chi_squared(mean)
Expectation <- c(10, 10, 10, 10)
Observed <- c(40, 40, 40, 40)
Chisq <- sum((( Expectation - Observed)^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
#Use the following function multiple times
plotChis(counts)
#Does the chi-squared differ by background?
#
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
#Use the following function multiple times
plotChis(counts)
#Does the chi-squared differ by background?
#
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
#percSig tells you the percent of trails that had a significant p-value.
percSig
propSig <- length( which( Chisqs > 11.70))/ length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")
#Set up empty plot to put data into
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at=1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
#Add Histogram of the data
counter <- 1
for(i in backgrounds) {
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
#Add a line reprsenting the critical value
abline( v= 11.70, lty=2, lwd = 2, col='black')
#Running the experiment without natural selection 10,000 times.
Simulation <- simDraws(10000)
#Add those ten thousand Chi-squared simulations to a plot
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
